#!/usr/bin/env python
# coding: utf-8

import os
import struct
import base64
import hashlib
import socket
import threading
#import paramiko
from apscheduler.schedulers.background import BackgroundScheduler

def pingpong():
    global map
    for key in map:
        list_ = map[key]
        for i in range (len(list_)):
            send_data(list_[i],'ping')
      #recv_pong(connList[i])

def recv_data(conn,address):    # 服务器解析浏览器发送的信息
    try:
        all_data = conn.recv(10240)
        if not len(all_data):
            return False
    except:
        pass
    else:
        code_len = ord(all_data[1]) & 127
        if code_len == 126:
            masks = all_data[4:8]
            data = all_data[8:]
        elif code_len == 127:
            masks = all_data[10:14]
            data = all_data[14:]
        else:
            masks = all_data[2:6]
            data = all_data[6:]
        raw_str = ""
        i = 0
        for d in data:
            raw_str += chr(ord(d) ^ ord(masks[i % 4]))
            i += 1
            
        print "RECIEVED : %s from socket %s:%s" % (raw_str,address[0],address[1])
        print "Length is %s"%len(raw_str)
        return raw_str


def send_data(conn, data):   # 服务器处理发送给浏览器的信息
#     if data!='close connect':
#         print 'TRANSMITE'
    if data == 'ping':
	print 'ping'
    if data:
        data = str(data)
    else:
        return False
    token = "\x81"
    length = len(data)
    if length < 126:
        token += struct.pack("B", length)    # struct为Python中处理二进制数的模块，二进制流为C，或网络流的形式。
    elif length <= 0xFFFF:
        token += struct.pack("!BH", 126, length)
    else:
        token += struct.pack("!BQ", 127, length)
    data = '%s%s' % (token, data)
    conn.send(data)
#    print 'SEND'
#     print 'SEND [ %s ] to socket %s:%s' %(data,address[0],address[1])
    print "%s Send %s bits" %(bool(conn),len(data))
    return True


def handshake(conn, address, thread_name):    # 握手建立连接
    headers = {}
    shake = conn.recv(1024)
    if not len(shake):
        return False

    print ('%s : Socket start handshaken with %s:%s' % (thread_name, address[0], address[1]))
    header, data = shake.split('\r\n\r\n', 1)
    for line in header.split('\r\n')[1:]:
        key, value = line.split(': ', 1)
        headers[key] = value

    if 'Sec-WebSocket-Key' not in headers:
        print ('%s : This socket is not websocket, client close.' % thread_name)
        conn.close()
        return False

    MAGIC_STRING = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'
    HANDSHAKE_STRING = "HTTP/1.1 101 Switching Protocols\r\n"\
                       "Upgrade:websocket\r\n"\
                       "Connection: Upgrade\r\n"\
                       "Sec-WebSocket-Accept: {1}\r\n"\
                       "WebSocket-Origin: {2}\r\n"\
                       "WebSocket-Location: wss://{3}/\r\n\r\n"

    sec_key = headers['Sec-WebSocket-Key']
    res_key = base64.b64encode(hashlib.sha1(sec_key + MAGIC_STRING).digest())
    str_handshake = HANDSHAKE_STRING.replace('{1}', res_key).replace('{2}', headers['Origin']).replace('{3}', headers['Host'])
    conn.send(str_handshake)                 # 发送建立连接的信息
    print ('%s : Socket handshaken with %s:%s success' % (thread_name, address[0], address[1]))
    print 'Start transmitting data...'
    print '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
    return True

def dojob(conn, address, thread_name,index):
    global map
    roomid = None
    handshake(conn, address, thread_name)     # 握手
    conn.setblocking(0)                       # 设置socket为非阻塞
    while True: 
        clientdata = recv_data(conn,address)
        if type(clientdata) is str and clientdata[0:12] == 'createroomid':
	    roomid = clientdata[12:]
 	    if map.get(roomid) is None:#roomid是否已经被创建
		map[roomid] = []
		map[roomid].append(conn)
		send_data(conn,'ok')
#		for i in range(len(map[roomid])):
#		    send_data(map[roomid][i],'users'+str(len(map[roomid])))
	    else:
  		send_data(conn,'room has been created')
                print ('%s : Socket close with %s:%s' % (thread_name, address[0], address[1]))
#		    map[roomid].remove(conn)
		conn.close()
	elif type(clientdata) is str and clientdata[0:10] == 'joinroomid':
	    roomid = clientdata[10:]
 	    if map.get(roomid) is not None:#roomid是否已经被创建
		map[roomid].append(conn)
		send_data(conn,'ok')
		for i in range(len(map[roomid])):
		    if map[roomid]!=conn:
		        send_data(map[roomid][i],'users'+str(len(map[roomid])))
	    else:
		send_data(conn,'room is not exsited')
                print ('%s : Socket close with %s:%s' % (thread_name, address[0], address[1]))
#		map[roomid].remove(conn)
		conn.close()

#		map[roomid].append(conn)
#		for i in range(len(map[roomid])):
#		    send_data(map[roomid][i],'users'+str(len(map[roomid])))

        elif type(clientdata) is str and (clientdata[0:11]=='handwriting' or clientdata[0:5]=='color' or clientdata[0:9] == 'cleardraw' or clientdata[0:5] == 'image' or clientdata[0:6] == 'closex'):
            for i in range(len(map[roomid])):
                send_data(map[roomid][i],clientdata)
		
	else:
            if clientdata is not None and clientdata !='pong':
                print ('%s : Socket close with %s:%s' % (thread_name, address[0], address[1]))
		#考虑client没有传来roomid的情况:直接关闭连接
		if roomid is not None:
		    map[roomid].remove(conn)
  		    for i in range(len(map[roomid])):
		        send_data(map[roomid][i],'users'+str(len(map[roomid])))
		    if len(map[roomid]) ==0:#最后一个用户退出房间注销roomid
			map.pop(roomid)
        	conn.close()
		break

        
def ws_service():
    index = 0
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(("0.0.0.0", 30000))
    sock.listen(100)

    print ('\r\n\r\nWebsocket server start, wait for connect!')
    print '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
    while True:
        connection, address = sock.accept()
        print '---NEW--COON---NEW--COON---NEW--COON--- '
        thread_name = 'thread_%s' % index
        print ('%s : Connection from %s:%s' % (thread_name, address[0], address[1]))
        t = threading.Thread(target=dojob, args=(connection, address, thread_name,index))
        t.start()
        index += 1

if __name__ == '__main__':
    map={}
    sched = BackgroundScheduler(timezone='MST')
    sched.add_job(pingpong, 'interval', id='3_second_job', seconds=30)
    sched.start()

    ws_service()



